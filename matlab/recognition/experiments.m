function experiments(trnSplit, trnSize, svmKernel, svmC)
% EXPERIMENTS   Run image classification experiments
%    The experimens download a number of benchmark datasets in the
%    'data/' subfolder. Make sure that there are several GBs of
%    space available.
%
%    By default, experiments run with a lite option turned on. This
%    quickly runs all of them on tiny subsets of the actual data.
%    This is used only for testing; to run the actual experiments,
%    set the lite variable to false.
%
%    Running all the experiments is a slow process. Using parallel
%    MATLAB and several cores/machiens is suggested.

% Author: Andrea Vedaldi

% Copyright (C) 2013 Andrea Vedaldi
% All rights reserved.
%
% This file is part of the VLFeat library and is made available under
% the terms of the BSD license (see the COPYING file).

diary off ;
clear ex ;
lite = true ;

Splits = 1 ; % seed / training split
Ntrn = [5 10 20 50] ; % training sample size
Kernel = 'hell' ; % SVM kernel
C = 10.^(-3:3) ; % SVM C

if lite
  Ntrn = 5 ;
end

if nargin >= 1
  Splits = trnSplit ;
end
if nargin >= 2
  Ntrn = trnSize ;
end
if nargin >= 3
  Kernel = svmKernel ;
end
if nargin >= 4
  C = svmC ;
end

numWords = 256 ;
ex(1).prefix = '' ;
ex(1).trainOpts = {} ;
ex(1).datasets = {'SUN397-R100K'} ;
ex(1).seed = 1 ;
ex(1).opts = {...
  'type', 'fv', ...
  'numWords', numWords, ...
  'numTrain', Inf, ...
  'numPcaDimensions', 128, ...
  'whitening', false, ...
  'whiteningRegul', 0, ...
  'numSamplesPerWord', ceil(1e6/numWords), ...
  'renormalize', false, ...
  'fvSquareRoot', false, ...
  'fvNormalized', false, ...
  'fvImproved', true, ...
  'vladUnnormalized', false, ...
  'vladNormalizeComponents', true, ...
  'vladNormalizeMass', false, ...
  'vladSquareRoot', true, ...
  'layouts', {'1x1', '3x1'}, ...
  'geometricExtension', 'none', ...
  'lite', lite, ...
  'extractorFn', @(x) getDenseSIFT(x, ...
                                   'step', 4, ...
                                   'rootSift', true, ...
                                   'addLcs', true, ...
                                   'lcsNormalizeComponents', false, ...
                                   'lcsNormalizeAll', false, ...
                                   'lcsSquareRoot', false, ...
                                   'scales', 2.^(0:-.5:-2), ...
                                   'binSize', 6)};

for i = 1:numel(Splits)
  for j = 1:numel(Ntrn)
    ind = numel(Ntrn)*(i-1) + j ;
    ex(ind) = ex(1) ;
    ex(ind).prefix = sprintf('S%02d-T%02d', Splits(i), Ntrn(j)) ;
    ex(ind).trainOpts = {'C', C, 'numTrain', Ntrn(j), 'kernel', Kernel, 'perfMeasure', 'accuracy'} ;
    ex(ind).seed = Splits(i) ;
  end
end

if lite, tag = 'lite' ;
else tag = 'ex' ; end

for i=1:numel(ex)
  for j=1:numel(ex(i).datasets)
    dataset = ex(i).datasets{j} ;
    if ~isfield(ex(i), 'trainOpts') || ~iscell(ex(i).trainOpts)
      ex(i).trainOpts = {} ;
    end
    traintest(...
      'prefix', [tag '-' dataset '-' ex(i).prefix], ...
      'seed', ex(i).seed, ...
      'dataset', char(dataset), ...
      'datasetDir', fullfile('data', dataset), ...
      'lite', lite, ...
      ex(i).trainOpts{:}, ...
      'encoderParams', ex(i).opts) ;
  end
end
